<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gorilla.Utilities</name>
    </assembly>
    <members>
        <member name="T:Gorilla.Utilities.Attributes.IgnorableProperty">
            <summary>
            Attr to ignore props on LoadFrom
            </summary>
        </member>
        <member name="T:Gorilla.Utilities.Bags.MethodFeedback">
            <summary>
            Generic class for feedback
            </summary>
        </member>
        <member name="T:Gorilla.Utilities.Bags.PagedResult`1">
            <summary>
             Class to help methods that return a paged result
            </summary>
            <typeparam name="T">Class for data</typeparam>
        </member>
        <member name="P:Gorilla.Utilities.Bags.PaginationSettings.Take">
            <summary>
            Take
            </summary>
        </member>
        <member name="P:Gorilla.Utilities.Bags.PaginationSettings.Search">
            <summary>
            Search
            </summary>
        </member>
        <member name="P:Gorilla.Utilities.Bags.PaginationSettings.OrderColumn">
            <summary>
            Order Column
            </summary>
        </member>
        <member name="P:Gorilla.Utilities.Bags.PaginationSettings.OrderDirection">
            <summary>
            Order Direction
            </summary>
        </member>
        <member name="T:Gorilla.Utilities.Bags.TypedMethodFeedback`1">
            <summary>
            Generic class for feedback with typed Data
            </summary>
            <typeparam name="T">Class to type Data</typeparam>
        </member>
        <member name="F:Gorilla.Utilities.Constantes.REGEX_EMAIL">
            <summary>
            Regex to validade email address
            </summary>
        </member>
        <member name="F:Gorilla.Utilities.Constantes.REGEX_CPF">
            <summary>
            Regex to validate brazilian CPF
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Gorilla.Utilities.Constantes.REGEX_DATE" -->
        <!-- Badly formed XML comment ignored for member "F:Gorilla.Utilities.Constantes.REGEX_TIME" -->
        <member name="F:Gorilla.Utilities.Constantes.REGEX_TIME24">
            <summary>
            Regexp for Time 24 hours
            </summary>
        </member>
        <member name="F:Gorilla.Utilities.Constantes.REGEX_EMAIL_MULTIPLE">
            <summary>
            Regex to validade multiple email addresses separeted by comma
            </summary>
        </member>
        <member name="F:Gorilla.Utilities.Constantes.REGEX_CREDIT_CARD_EXPIRATION_DATE">
            <summary>
            Regex for credit card expiration date validation
            </summary>
        </member>
        <member name="F:Gorilla.Utilities.Constantes.REGEX_CEP">
            <summary>
            Regexp for Brazilian CEP
            </summary>
        </member>
        <member name="F:Gorilla.Utilities.Constantes.MASK_PHONE">
            <summary>
            Mask for phone
            </summary>
        </member>
        <member name="F:Gorilla.Utilities.Constantes.MASK_MONEY">
            <summary>
            Mask for money
            </summary>
        </member>
        <member name="F:Gorilla.Utilities.Constantes.MASK_DATE">
            <summary>
            Mask for Date
            </summary>
        </member>
        <member name="F:Gorilla.Utilities.Constantes.DEFAULT_TIME_FORMAT">
            <summary>
            Default system time format - 10:00 AM
            </summary>
        </member>
        <member name="F:Gorilla.Utilities.Constantes.REGEX_PHONE_NUMBER">
            <summary>
            
            </summary>
        </member>
        <member name="F:Gorilla.Utilities.Constantes.MASK_CPF">
            <summary>
            
            </summary>
        </member>
        <member name="F:Gorilla.Utilities.Constantes.MASK_RG">
            <summary>
            
            </summary>
        </member>
        <member name="F:Gorilla.Utilities.Constantes.MASK_CEP">
            <summary>
            
            </summary>
        </member>
        <member name="T:Gorilla.Utilities.ExtensionMethodsDatetime">
            <summary>
            Extension Methods for Enums
            </summary>
        </member>
        <member name="M:Gorilla.Utilities.ExtensionMethodsDatetime.ToShortTimeString(System.Nullable{System.DateTime})">
            <summary>
            Verfiy if DateTime is not null and Converts the value of the current System.DateTime object to its equivalent short time string representation.
            </summary>
            <param name="dateTime"></param>
            <returns>A string that contains the short time string representation of the current</returns>
        </member>
        <member name="M:Gorilla.Utilities.ExtensionMethodsDatetime.ToShortDateString(System.Nullable{System.DateTime})">
            <summary>
            Verfiy if DateTime is not null and converts the value of the current System.DateTime object to its equivalent short date string representation.
            </summary>
            <param name="dateTime"></param>
            <returns>A string that contains the short date string representation of the current</returns>
        </member>
        <member name="M:Gorilla.Utilities.ExtensionMethodsDatetime.ToString(System.Nullable{System.DateTime},System.String)">
            <summary>
            
            </summary>
            <param name="dateTime"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="T:Gorilla.Utilities.ExtensionMethodsEnums">
            <summary>
            Extension Methods for Enums
            </summary>
        </member>
        <member name="M:Gorilla.Utilities.ExtensionMethodsEnums.GetDisplayName(System.Enum)">
            <summary>
            Get the display attribute of enum
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Gorilla.Utilities.ExtensionMethodsLinq.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.String)">
            <summary>
            Ordena pelo nome do campo a tabela
            </summary>
            <typeparam name="T">tabela</typeparam>
            <param name="datasource">query base</param>
            <param name="propertyName">nome do campo da tabela</param>
            <param name="direction">direção do sort</param>
            <returns></returns>
        </member>
        <member name="T:Gorilla.Utilities.ExtensionMethodsClass">
            <summary>
            Extension Methods 
            </summary>
        </member>
        <member name="M:Gorilla.Utilities.ExtensionMethodsClass.ToDateTime(System.String)">
            <summary>
            Convert string to DateTime
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Gorilla.Utilities.ExtensionMethodsClass.ToDecimal(System.String)">
            <summary>
            Convert string to Decimal
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Gorilla.Utilities.ExtensionMethodsClass.ToInt(System.String)">
            <summary>
            Convert a string to Int
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Gorilla.Utilities.ExtensionMethodsClass.ToInt(System.Object)">
            <summary>
            Convert an object to Int, used for enum
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Gorilla.Utilities.ExtensionMethodsClass.ToShort(System.String)">
            <summary>
            Convert a string to Short
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Gorilla.Utilities.ExtensionMethodsClass.ToByte(System.String)">
            <summary>
            Convert a string to Byte
            </summary>
        </member>
        <member name="M:Gorilla.Utilities.ExtensionMethodsClass.ToArray(System.IO.Stream)">
            <summary>
            Convert a Stream to array of bytes
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Gorilla.Utilities.ExtensionMethodsClass.OnlyNumbers(System.String)">
            <summary>
            Return only the numbers part of string
            Ex: 99999-999 => 99999999
            </summary>
        </member>
        <member name="M:Gorilla.Utilities.ExtensionMethodsClass.LoadFrom(System.Object,System.Object)">
            <summary>
            Map all properties of the source object them find a properties with same name and type on destiny and copy the value
            Use [IgnorableProperty] attr to ignore a prop
            </summary>
            <param name="destiny"></param>
            <param name="source">An object to read and get values</param>
        </member>
        <member name="M:Gorilla.Utilities.ExtensionMethodsClass.ConvertAll``1(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Convert all objects to T, use the extension method LoadFrom
            </summary>
            <typeparam name="T">Tipo de objeto de saída</typeparam>
            <param name="items">Lista de itens de origem</param>
        </member>
        <member name="M:Gorilla.Utilities.ExtensionMethodsClass.ConvertTo``1(System.Object)">
            <summary>
            Convert a class to another using the extension method LoadFrom
            </summary>
            <typeparam name="T">Class to convert</typeparam>
            <param name="item">Source</param>
            <returns></returns>
        </member>
        <member name="M:Gorilla.Utilities.ExtensionMethodsClass.FindNextDayOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the next date according to the day of week
            </summary>
        </member>
        <member name="T:Gorilla.Utilities.Formatador">
            <summary>
            Utilitário para formatação de documentos
            </summary>
        </member>
        <member name="T:Gorilla.Utilities.Validador">
            <summary>
            Classe para validação de padrões e de documentos
            </summary>
        </member>
        <member name="M:Gorilla.Utilities.Validador.IsValidEmail(System.String)">
            <summary>
            Faz a validação do email
            </summary>
        </member>
        <member name="M:Gorilla.Utilities.Validador.IsNumber(System.String)">
             <summary>
            Retorna true se a string tiver apenas numeros
             </summary>
             <param name="cpfCnpj"></param>
             <returns></returns>
        </member>
        <member name="M:Gorilla.Utilities.Validador.IsValidCpf(System.String)">
            <summary>
            Retorna true se o CPF for válido
            </summary>
        </member>
        <member name="M:Gorilla.Utilities.Validador.IsValidCnpj(System.String)">
            <summary>
            Retorna true se o CNPJ for válido
            </summary>
        </member>
        <member name="M:Gorilla.Utilities.Validador.IsValidCpfnpj(System.String)">
            <summary>
            Verfica se o documento é um CPF ou CNPJ e valida de acordo com o tipo
            </summary>
            <param name="cpfCnpj">Documento</param>
            <returns></returns>
        </member>
    </members>
</doc>
